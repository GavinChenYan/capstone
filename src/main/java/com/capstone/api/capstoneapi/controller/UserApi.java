/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.capstone.api.capstoneapi.controller;

import com.capstone.api.capstoneapi.model.Error;
import com.capstone.api.capstoneapi.model.User;
import com.capstone.api.capstoneapi.model.Verifier;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-28T16:12:15.884358400-05:00[America/Toronto]")
@Validated
@Tag(name = "users", description = "the users API")
public interface UserApi {

    default UserApiDelegate getDelegate() {
        return new UserApiDelegate() {};
    }

    /**
     * POST /user : Create User for capstone
     *
     * @param user Create User for capstone (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "createUser",
        summary = "Create User for capstone",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Error.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "capstone_auth", scopes={ "read:api", "write:api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<User> createUser(
        @Parameter(name = "User", description = "Create User for capstone", required = true) @Valid @RequestBody User user
    ) {

        return getDelegate().createUser(user);
    }


    /**
     * DELETE /user/{userId} : delete User
     *
     * @param userId The id of the User (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "deleteUser",
        summary = "delete User",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request"),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Error.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "capstone_auth", scopes={ "read:api", "write:api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user/{userId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Integer> deleteUser(
        @Parameter(name = "userId", description = "The id of the User", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId
    ) {
        return getDelegate().deleteUser(userId);
    }


    /**
     * GET /user : get user info
     *
     * @param email start data search (required)
     * @param password end data search (required)
     * @return An paged array of pets (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "getUser",
        summary = "get user info",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "An paged array of pets", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Error.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "capstone_auth", scopes={ "read:api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user",
        produces = { "application/json" }
    )
    
    default ResponseEntity<User> getUser(
        @NotNull @Parameter(name = "email", description = "start data search", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "email", required = true) String email,
        @NotNull @Parameter(name = "password", description = "end data search", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "password", required = true) String password
    ) {
        return getDelegate().getUser(email, password);
    }


    /**
     * PUT /user/{userId} : update User info
     *
     * @param userId The id of the user (required)
     * @param user user information (required)
     * @return An paged array of pets (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "updateUserInfo",
        summary = "update User info",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "An paged array of pets", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Error.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "capstone_auth", scopes={ "read:api", "write:api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/user/{userId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<User> updateUserInfo(
        @Parameter(name = "userId", description = "The id of the user", required = true, in = ParameterIn.PATH) @PathVariable("userId") String userId,
        @Parameter(name = "User", description = "user information", required = true) @Valid @RequestBody User user
    ) {
        return getDelegate().updateUserInfo(userId, user);
    }


    /**
     * POST /user/verify : verify User for capstone
     *
     * @param verifier verify User for capstone (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "verifyUser",
        summary = "verify User for capstone",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Error.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "capstone_auth", scopes={ "read:api", "write:api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/verify",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<String> verifyUser(
        @Parameter(name = "Verifier", description = "verify User for capstone", required = true) @Valid @RequestBody Verifier verifier
    ) {
        return getDelegate().verifyUser(verifier);
    }

}
