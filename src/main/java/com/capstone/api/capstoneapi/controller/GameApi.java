/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.capstone.api.capstoneapi.controller;

import com.capstone.api.capstoneapi.model.Error;
import com.capstone.api.capstoneapi.model.Game;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-28T16:12:15.884358400-05:00[America/Toronto]")
@Validated
@Tag(name = "games", description = "the games API")
public interface GameApi {

    default GameApiDelegate getDelegate() {
        return new GameApiDelegate() {};
    }

    /**
     * POST /game : Create game for capstone
     *
     * @param game Create Game for capstone (required)
     * @return Expected response to a valid request (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "createGame",
        summary = "Create game for capstone",
        tags = { "games" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Game.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Error.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "capstone_auth", scopes={ "read:api", "write:api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/game",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Game> createGame(
        @Parameter(name = "Game", description = "Create Game for capstone", required = true) @Valid @RequestBody Game game
    ) {
        return getDelegate().createGame(game);
    }


    /**
     * PUT /game/{gameId} : update Game info
     *
     * @param gameId The id of the user (required)
     * @param game user information (required)
     * @return An paged array of pets (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "updateGameInfo",
        summary = "update Game info",
        tags = { "games" },
        responses = {
            @ApiResponse(responseCode = "200", description = "a game object", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Game.class))
            }),
            @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Error.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "capstone_auth", scopes={ "read:api", "write:api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/game/{gameId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Game> updateGameInfo(
        @Parameter(name = "gameId", description = "The id of the game", required = true, in = ParameterIn.PATH) @PathVariable("gameId") String gameId,
        @Parameter(name = "Game", description = "user information", required = true) @Valid @RequestBody Game game
    ) {
        return getDelegate().updateGameInfo(gameId, game);
    }

    @Operation(
            operationId = "getAllGamesForUser",
            summary = "get ALL games for user",
            tags = { "games" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "An array of game", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Game.class))
                    }),
                    @ApiResponse(responseCode = "default", description = "unexpected error", content = {
                            @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Error.class)))
                    })
            },
            security = {
                    @SecurityRequirement(name = "capstone_auth", scopes={ "read:api", "write:api" })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/games/{email}",
            produces = { "application/json" },
            consumes = { "application/json" }
    )

    default ResponseEntity<List<Game>> getAllGamesForUser(
            @Parameter(name = "email", description = "The email of the user", required = true, in = ParameterIn.PATH) @PathVariable("email") String email
    ) {
        return getDelegate().getAllGamesByUser(email);
    }
}
